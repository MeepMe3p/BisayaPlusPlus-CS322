[1] Bpp has two ways for executing a file, by prompt (line by line) or by file
[2] For reading the file and executing it
[3] For entering code and executing it one at a time
[4] Store raw code as a simple string
// LEXER or BisayaPP.Scanner
[5] the lexical analyzer
[6] used for input, consumes the character and returns it 
[7] creates tokens for the each text
[8] tokens for text but for literals
[9] similar to advance but does not consume it
[10] checks whether the next is something to know whether it is <= or just <
[11] FOR STRING LITERALS
// PARSER 
[12] to automate the generation of syntax trees - naa sa Expr.java
[13] iterates through the list of expressions and creates a class for each of those expressions, key is the expression and value is 
    the structure to build that expression (will be plaed as the constructor)
[14] visitor pattern, instead of a bunch of if statements and writing a new function for each expression, use this pattern for more efficiency
    so that immediately go to the interpret method of that type of expression without the need of checking
[15] the code where 13, 14 will be typed inside the Expr.java
[16] The expressions generated by the GenerateAST.java, it has visitors and the constructors for each of the expressions
[20] method that deals with the '=' 
[21] 1st: Checks whether the token after mugna is numero, tipik chuchu (if it is save it as a type)
     2nd: Consumes the first IDENTIFIER (variable name), if theres comma iterate throough those and save in an list
     3rd: consumes equal then interpret

// INTERPRETER
[17] Turns the value into a string to be outputted in the terminal
[18] the interpreter, scans line by line, breaks into tokens, parses and outputs
[22] for performing operations, cehcks if one number is a double then return double one of it is, int if not, 

// ENVIRONMENT
[19] A map for the variables declared
[23] Used for global and local variables, { code inside braces }, 




[EXTRAS] WITH DECIMAL
[1.1] If has error exits duuuuuh (>_<)
[1.2] If error continues doesnt exit
[1.3] An infinite loop to execute code line by line (something similar sa cmd or terminal)


[TIPS] has T
[T1] Press Ctrl + D to exit the loop



[NOTES] HAS N
[N1] The reason why error is in here not in other places is cuz it is a good practice to separate code that
generates from the code that reports them


[EXTRA BUHATONONS FOR LE PROGRAMMER]
CREATE AN ERRORREPORTER THING FOR ERRORS


[LE PROGRAMMER NOTES]
The job of a scanner is to scan through list of chars and group them together
var language = "string" ; // each of these are lexemes


EXPRESSIONS
expression     → literal
               | unary
               | binary
               | grouping ;

literal        → NUMBER | STRING | "true" | "false" | "nil" ;
grouping       → "(" expression ")" ;
unary          → ( "-" | "!" ) expression ;
binary         → expression operator expression ;
operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
               | "+"  | "-"  | "*" | "/" ;

STATEMENT
program        → statement* EOF ;

statement      → exprStmt
               | printStmt ;
               | block ;
               | ifStmt

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;
block          → "{" declaration* "}"

ifStmt         → "if" "(" expression ")" "PUNDOK" statement
               ( "else" statement )? ;

ASSIGNMENT
expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
               | equality ;
               
javac -d . BisayaPP/*.java  Tool/*.java  # ComPILE
java Tool.GenerateAST # RUUUN
java BisayaPP.BisayaPlusPlus   # RUUUN



TODO:
- IMPLEMENT '&' CONCAT ===== DONE
- STATIC TTYPES        ===== DONE
- FIX REDUNDANT SA PARSER (PRIORITY) ==== DONE
- $ (new line)
- OO is true
- DILI is false
- [] <-- used for characters instead of ''